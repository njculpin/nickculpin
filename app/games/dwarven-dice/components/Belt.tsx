/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 belt.glb -o Belt.tsx -r public -k 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    belt: THREE.Mesh;
    Plane: THREE.Mesh;
    Cylinder017: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    Wood: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "Plane.001Action";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Belt(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/../belt.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="curve" position={[0, 1.599, 7.908]} />
        <mesh
          name="belt"
          geometry={nodes.belt.geometry}
          material={materials.Material}
          position={[0, 1.013, 7.908]}
          scale={[0.318, 1, 1]}
        />
        <mesh
          name="Plane"
          geometry={nodes.Plane.geometry}
          material={materials.Wood}
          position={[0.001, 1.595, 7.897]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[2.495, 0.544, 0.544]}
        />
        <mesh
          name="Cylinder017"
          geometry={nodes.Cylinder017.geometry}
          material={materials.Wood}
          position={[0.017, 0.985, 7.891]}
          scale={[1.101, 0.545, 1.101]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/../belt.glb");
